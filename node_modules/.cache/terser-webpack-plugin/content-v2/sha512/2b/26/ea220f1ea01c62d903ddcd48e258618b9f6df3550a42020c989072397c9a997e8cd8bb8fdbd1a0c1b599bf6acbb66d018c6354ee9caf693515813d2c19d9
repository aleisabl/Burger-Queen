{"map":"{\"version\":3,\"sources\":[\"/home/laboratoriad043/Desktop/Laboratoria/Burger-Queen/burger-queen/src/waiter/demo.js\",\"/home/laboratoriad043/Desktop/Laboratoria/Burger-Queen/burger-queen/src/serviceWorker.js\",\"/home/laboratoriad043/Desktop/Laboratoria/Burger-Queen/burger-queen/src/index.js\"],\"names\":[\"withStyles\",\"theme\",\"root\",\"flexGrow\",\"paper\",\"padding\",\"spacing\",\"unit\",\"textAlign\",\"color\",\"palette\",\"text\",\"secondary\",\"props\",\"classes\",\"react_default\",\"a\",\"createElement\",\"className\",\"Grid_default\",\"container\",\"item\",\"xs\",\"Paper_default\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"demo\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"sLAoDeA,IAAAA,EAAAA,OAAAA,EAAAA,WAAAA,CA9CA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAA8B,EAArBJ,EAAMK,QAAQC,KACvBC,UAAW,SACXC,MAAOR,EAAMS,QAAQC,KAAKC,aAuCfZ,CAnCf,SAAkBa,GAAO,IACfC,EAAYD,EAAZC,QAER,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAWJ,EAAQZ,MACtBa,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMI,WAAS,EAACd,QAAS,IACvBS,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,OAEFW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,OAEFW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,QAGJW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMI,WAAS,EAACd,QAAS,IACvBS,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,OAEFW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,GAAI,GACbP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,SAEFW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOE,UAAWJ,EAAQV,OAA1B,WC7BUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport { withStyles } from '@material-ui/core/styles';\\nimport Paper from '@material-ui/core/Paper';\\nimport Grid from '@material-ui/core/Grid';\\n\\nconst styles = theme => ({\\n  root: {\\n    flexGrow: 1,\\n  },\\n  paper: {\\n    padding: theme.spacing.unit * 2,\\n    textAlign: 'center',\\n    color: theme.palette.text.secondary,\\n  },\\n});\\n\\nfunction AutoGrid(props) {\\n  const { classes } = props;\\n\\n  return (\\n    <div className={classes.root}>\\n      <Grid container spacing={24}>\\n        <Grid item xs>\\n          <Paper className={classes.paper}>xs</Paper>\\n        </Grid>\\n        <Grid item xs>\\n          <Paper className={classes.paper}>xs</Paper>\\n        </Grid>\\n        <Grid item xs>\\n          <Paper className={classes.paper}>xs</Paper>\\n        </Grid>\\n      </Grid>\\n      <Grid container spacing={24}>\\n        <Grid item xs>\\n          <Paper className={classes.paper}>xs</Paper>\\n        </Grid>\\n        <Grid item xs={6}>\\n          <Paper className={classes.paper}>xs=6</Paper>\\n        </Grid>\\n        <Grid item xs>\\n          <Paper className={classes.paper}>xs</Paper>\\n        </Grid>\\n      </Grid>\\n    </div>\\n  );\\n}\\n\\nAutoGrid.propTypes = {\\n  classes: PropTypes.object.isRequired,\\n};\\n\\nexport default withStyles(styles)(AutoGrid);\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport Demo from './waiter/demo.js';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<Demo />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{124:function(e,a,t){\"use strict\";t.r(a);var n=t(0),r=t.n(n),c=t(48),s=t.n(c),o=(t(56),t(50)),l=t(8),i=t.n(l),m=t(5),p=t.n(m);var E=Object(o.withStyles)(function(e){return{root:{flexGrow:1},paper:{padding:2*e.spacing.unit,textAlign:\"center\",color:e.palette.text.secondary}}})(function(e){var a=e.classes;return r.a.createElement(\"div\",{className:a.root},r.a.createElement(p.a,{container:!0,spacing:24},r.a.createElement(p.a,{item:!0,xs:!0},r.a.createElement(i.a,{className:a.paper},\"xs\")),r.a.createElement(p.a,{item:!0,xs:!0},r.a.createElement(i.a,{className:a.paper},\"xs\")),r.a.createElement(p.a,{item:!0,xs:!0},r.a.createElement(i.a,{className:a.paper},\"xs\"))),r.a.createElement(p.a,{container:!0,spacing:24},r.a.createElement(p.a,{item:!0,xs:!0},r.a.createElement(i.a,{className:a.paper},\"xs\")),r.a.createElement(p.a,{item:!0,xs:6},r.a.createElement(i.a,{className:a.paper},\"xs=6\")),r.a.createElement(p.a,{item:!0,xs:!0},r.a.createElement(i.a,{className:a.paper},\"xs\"))))});Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(E,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},51:function(e,a,t){e.exports=t(124)},56:function(e,a,t){}},[[51,1,2]]]);","extractedComments":[]}