{"ast":null,"code":"var _jsxFileName = \"/home/laboratoriad043/Desktop/Laboratoria/Burger-Queen/burger-queen/src/menu/breakfast.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './menu.css';\nconst url = 'https://raw.githubusercontent.com/aleisabl/Burger-Queen/take-order/burger-queen/src/menu/burger-queen.json';\n\nclass ComponentBreakfast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Breakfast: [],\n      isLoading: true,\n      errors: null\n    };\n  }\n\n  // Now we're going to make a request for data using axios\n  getBreakfast() {\n    axios // This is where the data is hosted\n    .get(url) // Once we get a response and store data, let's change the loading state\n    .then(response => {\n      this.setState({\n        Breakfast: response.data.Desayunos,\n        isLoading: false\n      });\n    }) // If we catch any errors connecting, let's update accordingly\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  } // Let's our app know we're ready to render the data\n\n\n  componentDidMount() {\n    this.getBreakfast();\n  }\n\n  addOne() {\n    React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"hola\");\n  } // Putting that data to use\n\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          Breakfast = _this$state.Breakfast;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, !isLoading ? Breakfast.map(breakfast => {\n      const _id = breakfast._id,\n            name = breakfast.name,\n            price = breakfast.price,\n            img = breakfast.img;\n      return React.createElement(\"div\", {\n        className: \"breakfast-div\",\n        key: _id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"precio: $\", price), React.createElement(\"img\", {\n        onClick: addOne,\n        src: img,\n        alt: \"icon\",\n        width: \"20px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nexport default ComponentBreakfast;","map":{"version":3,"sources":["/home/laboratoriad043/Desktop/Laboratoria/Burger-Queen/burger-queen/src/menu/breakfast.js"],"names":["React","Component","axios","url","ComponentBreakfast","state","Breakfast","isLoading","errors","getBreakfast","get","then","response","setState","data","Desayunos","catch","error","componentDidMount","addOne","render","map","breakfast","_id","name","price","img"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AAEA,MAAMC,GAAG,GAAG,4GAAZ;;AAEA,MAAMC,kBAAN,SAAiCH,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAEzCI,KAFyC,GAEjC;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAFiC;AAAA;;AAOzC;AACAC,EAAAA,YAAY,GAAG;AACbP,IAAAA,KAAK,CACH;AADG,KAEFQ,GAFH,CAEOP,GAFP,EAGE;AAHF,KAIGQ,IAJH,CAIQC,QAAQ,IAAI;AAChB,WAAKC,QAAL,CAAc;AACZP,QAAAA,SAAS,EAAEM,QAAQ,CAACE,IAAT,CAAcC,SADb;AAEZR,QAAAA,SAAS,EAAE;AAFC,OAAd;AAID,KATH,EAUE;AAVF,KAWGS,KAXH,CAWSC,KAAK,IAAI,KAAKJ,QAAL,CAAc;AAAEI,MAAAA,KAAF;AAASV,MAAAA,SAAS,EAAE;AAApB,KAAd,CAXlB;AAYD,GArBwC,CAsBzC;;;AACAW,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,YAAL;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GA7BwC,CA8BzC;;;AACAC,EAAAA,MAAM,GAAG;AAAA,wBAC0B,KAAKf,KAD/B;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,SADZ,eACYA,SADZ;AAEP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACC,SAAD,GACCD,SAAS,CAACe,GAAV,CAAcC,SAAS,IAAI;AAAA,YACjBC,GADiB,GACSD,SADT,CACjBC,GADiB;AAAA,YACZC,IADY,GACSF,SADT,CACZE,IADY;AAAA,YACNC,KADM,GACSH,SADT,CACNG,KADM;AAAA,YACCC,GADD,GACSJ,SADT,CACCI,GADD;AAEzB,aACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,GAAG,EAAEH,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,IAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAaC,KAAb,CAFF,EAGE;AAAK,QAAA,OAAO,EAAEN,MAAd;AAAsB,QAAA,GAAG,EAAEO,GAA3B;AAAgC,QAAA,GAAG,EAAC,MAApC;AAA2C,QAAA,KAAK,EAAC,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD,KAVD,CADD,GAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,CADF,CADF;AAqBD;;AAtDwC;;AAyD3C,eAAetB,kBAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './menu.css';\n\nconst url = 'https://raw.githubusercontent.com/aleisabl/Burger-Queen/take-order/burger-queen/src/menu/burger-queen.json';\n\nclass ComponentBreakfast extends Component {\n // State will apply to the Breakfast object which is set to loading by default\n  state = {\n    Breakfast: [],\n    isLoading: true,\n    errors: null\n  };\n  // Now we're going to make a request for data using axios\n  getBreakfast() {\n    axios\n      // This is where the data is hosted\n      .get(url)\n      // Once we get a response and store data, let's change the loading state\n      .then(response => {\n        this.setState({\n          Breakfast: response.data.Desayunos,\n          isLoading: false\n        });\n      })\n      // If we catch any errors connecting, let's update accordingly\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n  // Let's our app know we're ready to render the data\n  componentDidMount() {\n    this.getBreakfast();\n  }\n\n  addOne() {\n    <p>hola</p>\n  }\n  // Putting that data to use\n  render() {\n    const { isLoading, Breakfast } = this.state;\n    return (\n      <React.Fragment>\n        <div>\n          {!isLoading ? (\n            Breakfast.map(breakfast => {\n              const { _id, name, price, img } = breakfast;\n              return (\n                <div className=\"breakfast-div\" key={_id}>\n                  <h6>{name}</h6>\n                  <p>precio: ${price}</p>\n                  <img onClick={addOne} src={img} alt=\"icon\" width=\"20px\"></img> \n                  <hr />\n                </div>\n              );\n            })\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ComponentBreakfast"]},"metadata":{},"sourceType":"module"}