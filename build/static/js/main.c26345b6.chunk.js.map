{"version":3,"sources":["home/burger-queen-logo.jpg","menu/breakfast.js","menu/lunch.js","menu/buttons.js","home/logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ComponentBreakfast","state","Breakfast","isLoading","errors","_this2","this","axios","get","then","response","setState","data","Desayunos","catch","error","getBreakfast","_this$state","react_default","a","createElement","map","breakfast","_id","name","price","img","className","key","src","alt","width","Component","ComponentLunch","Lunch","SideDish","Beverage","Hamburguesas","Acompañamientos","Bebidas","getLunch","lunch","type","extras","sidedish","beverage","ComponentButtons","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isToggleOn","handleClick","bind","assertThisInitialized","prevState","Fragment","onClick","menu_breakfast","menu_lunch","ComponentHome","logo","height","App","buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c26345b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-queen-logo.cdc0f111.jpg\";","import React, {Component} from 'react';\nimport axios from 'axios';\nimport './menu.css';\n\nconst url = 'https://raw.githubusercontent.com/aleisabl/Burger-Queen/master/src/menu/burger-queen.json';\n\nclass ComponentBreakfast extends Component {\n // State will apply to the Breakfast object which is set to loading by default\n  state = {\n    Breakfast: [],\n    isLoading: true,\n    errors: null\n  };\n  // Now we're going to make a request for data using axios\n  getBreakfast() {\n    axios\n      // This is where the data is hosted\n      .get(url)\n      // Once we get a response and store data, let's change the loading state\n      .then(response => {\n        this.setState({\n          Breakfast: response.data.Desayunos,\n          isLoading: false\n        });\n      })\n      // If we catch any errors connecting, let's update accordingly\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n  // Let's our app know we're ready to render the data\n  componentDidMount() {\n    this.getBreakfast();\n  }\n\n  // Putting that data to use\n  render() {\n    const { isLoading, Breakfast } = this.state;\n    return (\n        <div>\n          {!isLoading ? (\n            Breakfast.map(breakfast => {\n              const { _id, name, price, img } = breakfast;\n              return (\n                <div className=\"breakfast-div\" key={_id}>\n                  <h6>{name}</h6>\n                  <p>precio: ${price}</p>\n                {/*  <a href=\"#\"> */} <img /* onClick={addOne()} */ src={img} alt=\"icon\" width=\"20px\"></img> {/* </a> */}\n                  <hr />\n                </div>\n              );\n            })\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n    );\n  }\n}\n\nexport default ComponentBreakfast","import React, {Component} from 'react';\nimport axios from 'axios';\nimport './menu.css';\n\nconst url = 'https://raw.githubusercontent.com/aleisabl/Burger-Queen/master/src/menu/burger-queen.json';\n\nclass ComponentLunch extends Component {\n // State will apply to the Lunch object which is set to loading by default\n  state = {\n    Lunch: [],\n    SideDish: [],\n    Beverage: [],\n    isLoading: true,\n    errors: null\n  };\n  // Now we're going to make a request for data using axios\n  getLunch() {\n    axios\n      // This is where the data is hosted\n      .get(url)\n      // Once we get a response and store data, let's change the loading state\n      .then(response => {\n        this.setState({\n          Lunch: response.data.Hamburguesas,\n          SideDish: response.data.Acompañamientos,\n          Beverage : response.data.Bebidas,\n          isLoading: false\n        });\n      })\n      // If we catch any errors connecting, let's update accordingly\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n  // Let's our app know we're ready to render the data\n  componentDidMount() {\n    this.getLunch();\n  }\n  // Putting that data to use\n  render() {\n    const { isLoading, Lunch, SideDish, Beverage } = this.state;\n    return (\n        <div className=\"lunch-div\">\n          {!isLoading ? (\n            Lunch.map(lunch => {\n              const { _id, name, price, type, img, extras } = lunch;\n              return (\n                <div key={_id}>\n                  <h6>{name}</h6>\n                  <p>Precio: ${price}</p>\n                  <p>Tipo: <b>{type[0]}, {type[1]}, {type[2]}</b></p>\n                  <p>{extras[0]} ${extras[1]} <br></br> {extras[2]} ${extras[3]}</p>\n                  <img src={img} alt=\"icon\" width=\"20px\"></img>\n                  <hr />\n                </div>\n              );\n            })\n\n          ) : (\n            <p>Loading...</p>\n          )}\n\n             { SideDish.map(sidedish => {\n              const { _id, name, price, img } = sidedish;\n              return (\n                <div key={_id}>\n                  <h6>{name}</h6>\n                  <p>precio: ${price}</p>\n                  <img src={img} alt=\"icon\" width=\"20px\"></img>\n                  <hr />\n                </div>\n              );\n            })}\n\n              { Beverage.map(beverage => {\n              const { _id, name, price, img } = beverage;\n              return (\n                <div key={_id}>\n                  <h6>{name}</h6>\n                  <p>precio: ${price}</p>\n                  <img src={img} alt=\"icon\" width=\"20px\"></img>\n                  <hr />\n                </div>\n              );\n            })}\n\n            \n\n        </div>\n    );\n  }\n}\n\nexport default ComponentLunch","import React, {Component} from 'react';\nimport './menu.css';\nimport ComponentBreakfast from './breakfast.js'\nimport ComponentLunch from './lunch.js'\n\nclass ComponentButtons extends Component {\n\n      constructor(props) {\n        super(props);\n        this.state = {isToggleOn: true};\n    \n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n      }\n    \n      handleClick() {\n        this.setState(prevState => ({\n          isToggleOn: !prevState.isToggleOn\n        }));\n      }\n      \n\n    render() {\n      return (\n\n        <React.Fragment>\n\n        <div className=\"rectangle\">\n        <button type=\"button\" onClick={this.handleClick} className=\"btn btn-outline-info\">Menú</button> \n        <button type=\"button\" onClick={this.handleClick} className=\"btn btn-outline-info2\">Cocina</button>\n        </div>\n\n        <div className=\"rectangle2\">\n\n\n        {this.state.isToggleOn ? <ComponentBreakfast/> : null}\n        {this.state.isToggleOn ? <ComponentLunch/> : null}\n        </div>      \n\n        </React.Fragment>\n      );\n    }\n  }\n  \n\n\n\n\n\nexport default ComponentButtons;","import React, {Component} from 'react';\nimport logo from './burger-queen-logo.jpg';\nimport './home.css';\n\nclass ComponentHome extends Component{\n    render(){\n        return (\n    <div className=\"row\">\n    <div className=\"logo\">\n        <img alt=\"logo\" className=\"logo\" src={logo} width=\"85\" height=\"80\" />\n    </div>\n    </div>    \n        );\n    }\n}    \n\nexport default ComponentHome;","import React, {Component} from 'react';\nimport ComponentButtons from './menu/buttons.js'\nimport ComponentLogo from './home/logo.js'\nimport './App.css';\n\nclass App extends Component {\n  render(){\n      return (  \n        <React.Fragment>\n              <ComponentLogo/>\n              <ComponentButtons/>    \n        </React.Fragment>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}